/* This file is part of the Palabos library.
 *
 * Copyright (C) 2011-2013 FlowKit Sarl
 * Route d'Oron 2
 * 1010 Lausanne, Switzerland
 * E-mail contact: contact@flowkit.com
 *
 * The most recent release of Palabos can be downloaded at 
 * <http://www.palabos.org/>
 *
 * The library Palabos is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * The library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef INTERPARTICLE_POTENTIAL_HHM
#define INTERPARTICLE_POTENTIAL_HHM

#include "interparticlePotential.hm"

namespace plb {

namespace interparticlePotential {

template<typename T>
PsiYuanSchaefer<T>::PsiYuanSchaefer(T Tr_, std::string eos_)
    : Tr(Tr_), eos(eos_)
{ }

template<typename T>
T PsiYuanSchaefer<T>::compute(T rho) const {
    T cssq = (T)1/(T)3;

    if (eos == "vdW") { // van der Waals eos
        T a = (T)9/49;
        T b = (T)2/21;
        T rhoc = (T)1/3*(1/b);
        T pc = (T)1/27*(a/(b*b));
        // T RTc = (T)8/27*(a/b);
        T rhor = rho/rhoc;
        T pr = (T)8/3*rhor*Tr / ((T)1 - (T)1/3*rhor) - (T)3*rhor*rhor;
        return sqrt(fabs((T)2*(pr*pc/cssq-rho)));
        }
    else if (eos == "RK") { // Redlich-Kwong eos
        T a = (T)2/49; 
        T b = (T)2/21;
        T rhoc = (T)0.259921/b;
        T pc = (T)0.0298944*(pow(a/b,(T)2/3)/b);
        // T RTc = (T)0.34504*(pow(a/b,(T)2/3));
        T rhor = rho/rhoc;
        T pr = (T)3*rhor*Tr / ((T)1 - (T)0.259921*rhor)
                - (T)3.84732*rhor*rhor / (sqrt(Tr) * ((T)1 + (T)0.259921*rhor));
        return sqrt(fabs((T)2*(pr*pc/cssq-rho)));
        }
    else if (eos == "RKS") { // Redlich-Kwong-Soave eos
        T a = (T)2/49; 
        T b = (T)2/21;
        T rhoc = 0.259921/b;
        T pc = 0.01756*(a/(b*b));
        // T RTc = 0.202677*(a/b);
        T accfact = 0.344;  // accentric factor - omega
        T A = (T)1+((T)0.48+(T)1.575*accfact-(T)0.176*pow(accfact,(T)2))*((T)1-sqrt(Tr));
        T rhor = rho/rhoc;
        T pr = (T)3*rhor*Tr / ((T)1 - (T)0.259921*rhor) 
                - (T)3.84732*pow(A,(T)2)*rhor*rhor / ((T)1 + (T)0.259921*rhor);
        return sqrt(fabs((T)2*(pr*pc/cssq-rho)));
        }
    else if (eos == "PR") { // Peng-Robinson eos
        T a = (T)2/49; 
        T b = (T)2/21;
        T alpha = 3.25308;
        T beta = 0.253077;
        T gamma = 4.8387;
        T rhoc = beta/b;
        T pc = beta*beta/gamma*(a/(b*b));
        // T RTc = alpha*beta/gamma*(a/b);
        T accfact = 0.344;  // accentric factor - omega
        T A = (T)1+((T)0.37464+(T)1.54226*accfact-(T)0.26992*accfact*accfact)*((T)1-sqrt(Tr));
        T rhor = rho/rhoc;
        T pr = alpha*rhor*Tr / ((T)1 - beta*rhor)
              - gamma*A*A*rhor*rhor / ((T)1+ (T)2*beta*rhor - beta*beta*rhor*rhor);
        return sqrt(fabs((T)2*(pr*pc/cssq-rho)));
        }
    else if (eos == "CS") { // Carnahan-Starling eos
        T a = (T)1; 
        T b = (T)4;
        T alpha = 2.78586;
        T beta = 0.130444;
        T gamma = 3.85246;
        T rhoc = (T)4*beta/b;
        T pc = (T)16*beta*beta/gamma*(a/(b*b));
        // T RTc = (T)4*alpha*beta/gamma*(a/b);
        T rhor = rho/rhoc;
        T pr = alpha*rhor*Tr * ((T)1 + beta*rhor + pow(beta*rhor,(T)2) - pow(beta*rhor,(T)3)) / pow((T)1 - beta*rhor,(T)3)
              - gamma*rhor*rhor;
        return sqrt(fabs((T)2*(pr*pc/cssq-rho)));
        }
    else {
        pcout << "Warning: undefined equation of state" << std::endl;
        return 0;
        }
}

template<typename T>
PsiYuanSchaefer<T>* PsiYuanSchaefer<T>::clone() const {
    return new PsiYuanSchaefer<T>(*this);
}

}  // namespace interparticlePotential

}  // namespace plb

#endif  // INTERPARTICLE_POTENTIAL_HHM
