/* This file is part of the Palabos library.
 *
 * Copyright (C) 2011-2013 FlowKit Sarl
 * Route d'Oron 2
 * 1010 Lausanne, Switzerland
 * E-mail contact: contact@flowkit.com
 *
 * The most recent release of Palabos can be downloaded at 
 * <http://www.palabos.org/>
 *
 * The library Palabos is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * The library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef INTERPARTICLE_POTENTIAL_HM
#define INTERPARTICLE_POTENTIAL_HM

#include "core/globalDefs.h"
#include <cmath>

namespace plb {

/// Interaction potentials which depend only on the density rho
namespace interparticlePotential {

/// Yuan, Schaefer 2006: \f[ \Psi = \sqrt((p-\rho*cs^2)/(0.5*g*cs^2)) \f]
template<typename T>
class PsiYuanSchaefer : public PsiFunction<T> {
public:
    PsiYuanSchaefer(T Tr_, std::string eos_);
    virtual T compute(T rho) const;
    virtual PsiYuanSchaefer<T>* clone() const;
private:
    T Tr;
    std::string eos;
};

}  // namespace potentials

}  // namespace plb

#endif  // INTERPARTICLE_POTENTIAL_HM
